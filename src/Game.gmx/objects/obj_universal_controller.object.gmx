<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

world_difficulty = 1;
farthest_world = 1;
in_dungeon_pit = false;
room_x = -1;
room_y = -1;
damage_taken = 0;
enemies_killed = 0;
damage_done = 0;
num_clicks = 0;
steps_taken = 0;
number_of_rooms = 6;
moving_from_town = false;
loading_char_position = false;
loading_char_x = 0;
loading_char_y = 0;
room_config = -1;

scr_load_world(global.save_selected);

if(room_x != -1 &amp;&amp; room_y != -1
    &amp;&amp; not obj_char.using_key) {
    loading_char_position = true;
    room_goto(rm_gamescreen2);
}
else {
    obj_loading_overlay.loading = false;
}




if(not file_exists("room_save.ini")) {

    //Free room_config if it already holds a grid
    //to avoid memory leaks.
    if(ds_exists(room_config, ds_type_grid))
    {
        ds_grid_destroy(room_config);
    }
    //room_config = generate_floor(number_of_rooms);
    room_config = generate_floor_with_boss(number_of_rooms);
    
    grid_height = ds_grid_height(room_config);
    grid_width = ds_grid_width(room_config);
}
else {
    ini_open("room_save.ini");
    grid_height = ini_read_real("room_config", "height", 0);
    grid_width = ini_read_real("room_config", "width", 0);
    //Free room_config if it already holds a grid
    //to avoid memory leaks.
    if(ds_exists(room_config, ds_type_grid))
    {
        ds_grid_destroy(room_config);
    }
    
    room_config = ds_grid_create(grid_width, grid_height);
    
    for(var row=0; row&lt;grid_height; row++) {
        for(var col=0; col&lt;grid_width; col++) {
            ds_grid_add(room_config, col, row, 
                ini_read_real("room_config", string(row) + "," + string(col), -1));
        }
    }
    ini_close();
}
starting_room_x = -1;
starting_room_y = -1;

var line = "";
for (var r=0; r&lt;grid_height; r++) {
    for(var c=0; c&lt;grid_width; c++) {
        line = line + " " + string(ds_grid_get(room_config, c, r));
    }
    sdb(line);
    line = "";
}

for(var r=0; r&lt;grid_height; r++) {
    for(var c=0; c&lt;grid_width; c++) {
        if(ds_grid_get(room_config, c, r) == 3) {
            starting_room_x = c;
            starting_room_y = r;
            break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grids.
if(ds_exists(room_config, ds_type_grid))
{
    ds_grid_destroy(room_config);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create escape if player cleared dungeon pit

if(instance_exists(obj_char) &amp;&amp; !(room == rm_gameover)){
    if(mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right)){
        obj_universal_controller.num_clicks+=1;
    }
}


if(in_dungeon_pit) {
    if(instance_exists(obj_char)) {
        nearest_enemy = instance_nearest(obj_char.x, obj_char.y, obj_enemy_base);
        if(nearest_enemy == noone) { 
            teleport_floor = instance_find(obj_dungeon_pit_floor, 
                random(instance_number(obj_dungeon_pit_floor)));
            instance_create(teleport_floor.x, teleport_floor.y, obj_terrain_teleport);
            in_dungeon_pit = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
