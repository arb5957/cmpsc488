<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
randomize();

//Note that you shouldn't use cells &gt; 10 for now.
cells = irandom_range(4,10);
number_side_colors = 4;
global.tetravex_colors[0] = c_red;
global.tetravex_colors[1] = c_blue;
global.tetravex_colors[2] = c_green;
global.tetravex_colors[3] = c_yellow;
polyomino = generate_small_polyomino(cells);

rows = ds_grid_height(polyomino);
cols = ds_grid_width(polyomino);

print_grid(polyomino);

//Variables for drawing the polyomino grid.
polyomino_x1 = 64;
polyomino_y1 = 64;
polyomino_y2 = 540-64;
polyomino_x2 = polyomino_y2;
var h = polyomino_y2 - polyomino_y1;
var w = polyomino_x2 - polyomino_x1;
var maximum = max(rows,cols);
s = 0;
if(maximum == rows)
{
    s = h/(rows-2);
}
else
{
    s = w/(cols-2);
}
quarter_s = s/4;
half_s = s/2;

//TODO: Consider deleting the polyomino grid as we
//probably don't need it anymore.

//Hold positions of all polyominoes for collision detection
//and drawing.
polyomino_cells_x[cells-1] = 0;
polyomino_cells_y[cells-1] = 0;

var polyomino_cells_iterator = 0;

for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var xx = polyomino_x1 + ((c-1)*s);
            var yy = polyomino_y1 + ((r-1)*s);
            
            polyomino_cells_x[polyomino_cells_iterator] = xx;
            polyomino_cells_y[polyomino_cells_iterator] = yy;
            
            polyomino_cells_iterator++;
        }
    }
}


//Generate Blocks
block_grid = ds_grid_create(cols,rows);
ds_grid_clear(block_grid,0);
blocks[cells-1] = 0;

//This is the block the player clicks on and is currently
//holding.
selected_block = 0;

//When the player is not holding a block, they are holding empty.
empty = 0;

//This is a iterator for the blocks in the following
//for loop.
var current_block = 0;

for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var block = instance_create(0,0,obj_tetravex_block);
            while(block.id == 0)
            {
                with(block){instance_destroy();}
                block = instance_create(0,0,obj_tetravex_block);
            }
            
            block.grid_column = c;
            block.grid_row = r;
            block.s = s;
            block.quarter_s = quarter_s;
            
            //This variable is passed to the block, so it can
            //communicate with this object.
            block.game = id;
            
            ds_grid_set(block_grid,c,r,block);
            blocks[current_block] = block;
            current_block++;
            
            var up_block = ds_grid_get(block_grid,c,r-1);
            var down_block = ds_grid_get(block_grid,c,r+1);
            var left_block = ds_grid_get(block_grid,c-1,r);
            var right_block = ds_grid_get(block_grid,c+1,r);
            
            if(up_block == 0)
            {
                block.up = irandom(number_side_colors-1);
            }
            else
            {
                block.up = up_block.down;
            }
            
            if(down_block == 0)
            {
                block.down = irandom(number_side_colors-1);
            }
            else
            {
                block.down = down_block.up;
            }
            
            if(left_block == 0)
            {
                block.left = irandom(number_side_colors-1);
            }
            else
            {
                block.left = left_block.right;
            }
            
            if(right_block == 0)
            {
                block.right = irandom(number_side_colors-1);
            }
            else
            {
                block.right = right_block.left;
            }
        }
    }
}

show_debug_message("block_grid: ");
print_grid(block_grid);

ds_grid_clear(block_grid,0);
//ds_grid_destroy(block_grid);

for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var block_id = block.id;
    
    show_debug_message(string(block.id) + " up: " + string(block.up) + " down: " + string(block.down) + " left: " + string(block.left) + " right: " + string(block.right));
}

//Shuffle blocks.
var minimum = 0;
var maximum = cells-1;

for(var i = 0; i &lt; cells; i++)
{
    var select = irandom_range(minimum, maximum);
    
    var temp = blocks[minimum];
    blocks[minimum] = blocks[select];
    blocks[select] = temp;
    
    minimum++;
}

show_debug_message("After shuffling...");
for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var block_id = block.id;
    
    show_debug_message(string(block.id) + " up: " + string(block.up) + " down: " + string(block.down) + " left: " + string(block.left) + " right: " + string(block.right));
}


//Place blocks on a grid at the right side of screen.

var grid_x1 = polyomino_x2 + s;
var grid_y1 = polyomino_y1;
var grid_x2 = 960-64;
//var grid_y2 = polyomino_y2;

var spacing = quarter_s / 2;

var cur_row = 0;
var cur_col = 0;
for(var i = 0; i &lt; cells; i++)
{
    var xx = grid_x1 + (cur_col * (s+spacing));
    var yy = grid_y1 + (cur_row * (s+spacing));
    
    if((xx+s) &gt; grid_x2)
    {
        cur_row++;
        cur_col = 0;
    }
    else
    {
        cur_col++;
    }
    blocks[i].x = xx;
    blocks[i].y = yy;
    
}

//This depth is used to make sure the selected block is
//always over other blocks.
top_most_depth = -1;

//Whether the player won or not.
won = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the grid holding our polyomino and blocks.
ds_grid_destroy(polyomino);

ds_grid_destroy(block_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact with blocks.

var clicked_in_polyomino = false;
//If we click, we either are picking up a block or dropping it.
if(mouse_check_button_pressed(mb_left))
{
    //If we're holding a block already,
    if(selected_block != empty)
    {
        //Check if we clicked in the polyomino.
        for(var r = 1; r &lt; (rows-1); r++)
        {
            for(var c = 1; c &lt; (cols-1); c++)
            {
                var value = ds_grid_get(polyomino,c,r);
                if(value == 1)
                {
                    var x1 = polyomino_x1 + ((c-1)*s);
                    var y1 = polyomino_y1 + ((r-1)*s);
                    var x2 = x1 + s;
                    var y2 = y1 + s;
                    //Yes we clicked in the polyomino, so
                    if(point_in_rectangle(mouse_x, mouse_y, x1, y1, x2, y2))
                    {
                        clicked_in_polyomino = true;
                        var block_in_polyomino = ds_grid_get(block_grid,c,r);
                        //If there is already a block here,
                        if(block_in_polyomino != 0)
                        {   
                            //Swap blocks.
                            ds_grid_set(block_grid,c,r,selected_block);
                            var temp = selected_block;
                            selected_block = block_in_polyomino;
                            block_in_polyomino = temp;
                            
                            //We need to set new properties for the blocks.
                            block_in_polyomino.in_polyomino = true;
                            block_in_polyomino.grid_col = c;
                            block_in_polyomino.grid_row = r;
                            block_in_polyomino.x = x1;
                            block_in_polyomino.y = y1;
                            
                            selected_block.in_polyomino = false;
                            //The selected block should always be above other things.
                            scr_bring_to_front(selected_block);
                            
                        }
                        else//There is no block in this cell of the polyomino.
                        {
                            //Drop selected_block into the polyomino.
                            ds_grid_set(block_grid,c,r,selected_block);
                            
                            selected_block.in_polyomino = true;
                            selected_block.grid_col = c;
                            selected_block.grid_row = r;
                            
                            selected_block.x = x1;
                            selected_block.y = y1;
                            
                            selected_block = empty;
                        }
                    }
                }
            }
        }
        //If we click and it's not over a cell of the polyomino,
        //then we drop the block where it is.
        if(not clicked_in_polyomino)
        {
            selected_block = empty;
        }
    }
    else
    {//We are holding nothing.
        //Check each block for collision.
        for(var i = 0; i &lt; cells; i++)
        {
            var x1 = blocks[i].x;
            var y1 = blocks[i].y;
            var x2 = x1 + s;
            var y2 = y1 + s;
            //We clicked on a block,
            if(point_in_rectangle(mouse_x, mouse_y, x1, y1, x2, y2))
            {
                //Pick up a block.
                selected_block = blocks[i].id;
                
                //If we picked it up from the polyomino,
                if(selected_block.in_polyomino)
                {
                    //We need to set it's place back to 0 in the block_grid.
                    ds_grid_set(block_grid, selected_block.grid_col, selected_block.grid_row, 0);
                }
                
                //Every block the player picks up is always not in the polyomino.
                selected_block.in_polyomino = false;
                
                //It needs to be above other things, so
                scr_bring_to_front(selected_block);
            }
        }
    }
    //print_grid(block_grid);
}

//If we're holding a block,
if(selected_block != empty)
{
    //Center the block on the mouse.
    selected_block.x = mouse_x - half_s;
    selected_block.y = mouse_y - half_s;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check win condition.
var blocks_found = 0;
var win_test = true;
for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var block = ds_grid_get(block_grid,c,r);
        //If a block is in this location,
        if(block != empty)
        {
            blocks_found++;
            
            var up_block = ds_grid_get(block_grid, c, r - 1);
            var down_block = ds_grid_get(block_grid, c, r + 1);
            var left_block = ds_grid_get(block_grid, c - 1, r);
            var right_block = ds_grid_get(block_grid, c + 1, r);
            
            if(up_block != empty)
            {
                if(block.up != up_block.down)
                {
                    win_test = false;
                }
            }
            
            if(down_block != empty)
            {
                if(block.down != down_block.up)
                {
                    win_test = false;
                }
            }
            
            if(left_block != empty)
            {
                if(block.left != left_block.right)
                {
                    win_test = false;
                }
            }
            
            if(right_block != empty)
            {
                if(block.right != right_block.left)
                {
                    win_test = false;
                }
            }
        }
    }
}
if(blocks_found != cells)
{
    win_test = false;
}
if(win_test != false)
{
    won = true;
}
else
{
    won = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate new board.
/*ds_grid_destroy(polyomino);

polyomino = generate_small_polyomino(cells);

rows = ds_grid_height(polyomino);
cols = ds_grid_width(polyomino);

print_grid(polyomino);

var count = 0;
for(var r = 0; r &lt; rows; r++)
{
    for(var c = 0; c &lt; cols; c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1) count++;
    }
}
show_debug_message("Found " + string(count) + " cells.");
if(count != cells)
{
    show_debug_message("obj_tetravex: Test failed.");
    game_end();
}
else
{
    show_debug_message("obj_tetravex: Test succeeded.");
}

ds_grid_destroy(block_grid);
block_grid = ds_grid_create(cols,rows);
ds_grid_clear(block_grid,0);
blocks[cells-1] = 0;
current_block = 0;

for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var block = instance_create(0,0,obj_tetravex_block);
            while(block.id == 0)
            {
                with(block){instance_destroy();}
                block = instance_create(0,0,obj_tetravex_block);
            }
            
            block.grid_column = c;
            block.grid_row = r;
            
            ds_grid_set(block_grid,c,r,block);
            blocks[current_block] = block;
            current_block++;
            
            var up_block = ds_grid_get(block_grid,c,r-1);
            var down_block = ds_grid_get(block_grid,c,r+1);
            var left_block = ds_grid_get(block_grid,c-1,r);
            var right_block = ds_grid_get(block_grid,c+1,r);
            
            if(up_block == 0)
            {
                block.up = irandom(number_side_colors-1);
            }
            else
            {
                block.up = up_block.down;
            }
            
            if(down_block == 0)
            {
                block.down = irandom(number_side_colors-1);
            }
            else
            {
                block.down = down_block.up;
            }
            
            if(left_block == 0)
            {
                block.left = irandom(number_side_colors-1);
            }
            else
            {
                block.left = left_block.right;
            }
            
            if(right_block == 0)
            {
                block.right = irandom(number_side_colors-1);
            }
            else
            {
                block.right = right_block.left;
            }
        }
    }
}

show_debug_message("block_grid: ");
print_grid(block_grid);

//ds_grid_destroy(block_grid);

for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var block_id = block.id;
    
    show_debug_message(string(block.id) + " up: " + string(block.up) + " down: " + string(block.down) + " left: " + string(block.left) + " right: " + string(block.right));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw polyomino

//draw_set_color(c_green);
//draw_rectangle(x1,y1,x2,y2,false);

for(var i = 0; i &lt; cells; i++)
{
    var x1 = polyomino_cells_x[i];
    var y1 = polyomino_cells_y[i];
    var x2 = x1 + s;
    var y2 = y1 + s;
    draw_set_color(c_black);
    draw_rectangle(x1, y1, x2, y2, true);
}

/*
for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var xx1 = polyomino_x1 + ((c-1)*s);
            var yy1 = polyomino_y1 + ((r-1)*s);
            var xx2 = xx1 + s;
            var yy2 = yy1 + s;
            draw_set_color(c_black);
            draw_rectangle(xx1,yy1,xx2,yy2,true);
        }
    }
}
*/
/*
for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var x1 = block.x;
    var y1 = block.y;
    var x2 = x1+s;
    var y2 = y1+s;
    
    draw_set_color(c_black);
    draw_rectangle(x1,y1,x2,y2,false);
    
    draw_set_color(global.tetravex_colors[block.up]);
    draw_rectangle(x1+quarter_s,y1,x2-quarter_s,y1+quarter_s,false);
    
    draw_set_color(global.tetravex_colors[block.right]);
    draw_rectangle(x2-quarter_s,y1+quarter_s,x2,y2-quarter_s,false);
    
    draw_set_color(global.tetravex_colors[block.down]);
    draw_rectangle(x1+quarter_s,y2-quarter_s,x2-quarter_s,y2,false);
    
    draw_set_color(global.tetravex_colors[block.left]);
    draw_rectangle(x1,y1+quarter_s,x1+quarter_s,y2-quarter_s,false);
}

//Draw the selected block above other blocks.
if(selected_block != empty)
{
    var block = selected_block;
    var x1 = block.x;
    var y1 = block.y;
    var x2 = x1+s;
    var y2 = y1+s;
    
    draw_set_color(c_black);
    draw_rectangle(x1,y1,x2,y2,false);
    
    draw_set_color(global.tetravex_colors[block.up]);
    draw_rectangle(x1+quarter_s,y1,x2-quarter_s,y1+quarter_s,false);
    
    draw_set_color(global.tetravex_colors[block.right]);
    draw_rectangle(x2-quarter_s,y1+quarter_s,x2,y2-quarter_s,false);
    
    draw_set_color(global.tetravex_colors[block.down]);
    draw_rectangle(x1+quarter_s,y2-quarter_s,x2-quarter_s,y2,false);
    
    draw_set_color(global.tetravex_colors[block.left]);
    draw_rectangle(x1,y1+quarter_s,x1+quarter_s,y2-quarter_s,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Winning text

if(won)
{
    draw_text(0,0,"You Won!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
