<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_next_world</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
image_speed = .15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_universal_controller.farthest_world &lt; world_difficulty) {
    //instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_char">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move character to random world
scr_save_room();
with(obj_universal_controller) {
    moving_from_town = true;
    if(world_difficulty != other.world_difficulty) {
        //save room config if not already saved
        ini_open("room_save" + string(world_difficulty) + ".ini");
        if(not ini_section_exists("room_config")) {
            ini_write_real("room_config", "width", grid_width);
            ini_write_real("room_config", "height", grid_height);
            for(var row = 0; row &lt; grid_height; row++) {
                for(var col = 0; col &lt; grid_width; col++) {
                    ini_write_real("room_config", string(row) + "," + string(col),
                        ds_grid_get(room_config, col, row));
                }
            }
        }
        ini_close();
        ds_grid_destroy(room_config);
        
        //load new world config if exists, else create a new one
        if(file_exists("room_save" + string(other.world_difficulty) + ".ini")) {
            ini_open("room_save" + string(other.world_difficulty) + ".ini");
            if(ini_section_exists("room_config")) {
                grid_height = ini_read_real("room_config", "height", 0);
                grid_width = ini_read_real("room_config", "width", 0);
                room_config = ds_grid_create(grid_width, grid_height);
                for(var row = 0; row &lt; grid_height; row++) {
                    for(var col = 0; col &lt; grid_width; col++) {
                        ds_grid_add(room_config, col, row,
                            ini_read_real("room_config", string(row) + "," + string(col), -1));
                    }
                }
            }
            else {
                room_config = generate_floor_with_boss(number_of_rooms);
                grid_height = ds_grid_height(room_config);
                grid_width = ds_grid_width(room_config);
                ini_write_real("room_config", "height", grid_height);
                ini_write_real("room_config", "width", grid_width);
                for(var row = 0; row &lt; grid_height; row++) {
                    for(var col = 0; col &lt; grid_width; col++) {
                        ini_write_real("room_config", string(row) + "," + string(col), 
                            ds_grid_get(room_config, col, row));
                    }
                }
            }
            ini_close();
        }
        else {
            room_config = generate_floor_with_boss(number_of_rooms);
            grid_height = ds_grid_height(room_config);
            grid_width = ds_grid_width(room_config);
            ini_open("room_save" + string(other.world_difficulty) + ".ini");
            ini_write_real("room_config", "height", grid_height);
            ini_write_real("room_config", "width", grid_width);
            for(var row = 0; row &lt; grid_height; row++) {
                for(var col = 0; col &lt; grid_width; col++) {
                    ini_write_real("room_config", string(row) + "," + string(col), 
                        ds_grid_get(room_config, col, row));
                }
            }
            ini_close();
        }
        scr_print_room_config();
    }
    world_difficulty = other.world_difficulty;
    if(farthest_world &lt; other.world_difficulty) {
        farthest_world = other.world_difficulty;
    }
    
    for(var r=0; r&lt;grid_height; r++) {
        for(var c=0; c&lt;grid_width; c++) {
            if(abs(ds_grid_get(room_config, c, r)) == 3) {
                starting_room_x = c;
                starting_room_y = r;
                break;
            }
        }
    }
    room_x = starting_room_x;
    room_y = starting_room_y;
    
    sdb("room config: ");
    print_grid(room_config);
    
    
    //Mark the starting room as visited.
    sdb("room x: " + string(room_x) + " room y: " + string(room_y));
    if(room_x != -1 &amp;&amp; room_y != -1) {
        ds_grid_set(room_config, room_x, room_y, -abs(ds_grid_get(room_config,room_x,room_y)));
    }
}
room_goto(rm_gamescreen2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
