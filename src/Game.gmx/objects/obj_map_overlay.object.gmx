<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

opened = false;

w = 300;
h = 200;

room_rows = -1;
room_cols = -1;

//Room size in pixels.
room_size = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle overlay

first_opening = false;

//if(keyboard_check_pressed(global.key_toggle_map))
//{
//    opened = !opened;
    if opened { 
        
        room_rows = ds_grid_height(obj_universal_controller.room_config);
        room_cols = ds_grid_width(obj_universal_controller.room_config);
        
        w = room_cols * room_size;
        h = room_rows * room_size;
        
    }
    else
    {
        /*if(instance_exists(obj_inventory) &amp;&amp; not instance_exists(obj_recon_drone)
            &amp;&amp; not instance_exists(obj_att_drone)) {
            obj_inventory.disabled = false;
            obj_inventory.can_use_items = true;
        }*/
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save previous alpha
if(not opened) exit;
previous_alpha = draw_get_alpha();
previous_color = draw_get_colour();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu on escape press

if(opened)
{   
    /*if(instance_exists(obj_inventory)) {
        obj_inventory.disabled = true;
        obj_inventory.can_use_items = false;
    }*/
    
    opened = true;
    draw_set_alpha(0.75);
    draw_set_colour(c_black);
    v_x = view_xview[0];
    v_y = view_yview[0];
    
    var x1 = v_x;
    var y1 = v_y;
    var x2 = v_x + w;
    var y2 = v_y + h;
    
    draw_rectangle(x1,y1,x2,y2,false);
    
    
    for(var r = 0; r &lt; room_rows; r++)
    {
        for(var c = 0; c &lt; room_cols; c++)
        {
            var current_room = ds_grid_get(obj_universal_controller.room_config,c,r);
            if(current_room == -1 or current_room == -3 or current_room == -4)
            {
                draw_set_alpha(1);
                if(c == obj_universal_controller.room_x and r == obj_universal_controller.room_y)
                {
                    draw_set_color(c_red);
                }
                else
                {
                    draw_set_color(c_white);
                }
                var xx1 = v_x + (c*room_size);
                var yy1 = v_y + (r*room_size);
                var xx2 = xx1 + room_size;
                var yy2 = yy1 + room_size;
                draw_rectangle(xx1,yy1,xx2,yy2,false);
                
                //show_debug_message("Drawing square for " + " r " + string(r) + " c " + string(c));
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restore alpha and color

draw_set_colour(previous_color);
draw_set_alpha(previous_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
