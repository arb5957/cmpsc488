<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//song = mus_mystery;
randomize();
songs = ds_list_create();
ds_list_add(songs,mus_mystery,mus_converging_blocks,mus_diety_harp,mus_techno_lullaby);
//For testing
//ds_list_add(songs,sfx_droplet_hi,sfx_wheya,sfx_dododo,sfx_lightning_hit);
ds_list_shuffle(songs);

song_index = 0;
last_song_index = 3;
paused = false;

if(not global.mute)
{
    audio_play_sound(ds_list_find_value(songs,song_index),100,false);
}
sdb("Initial song play sequence: " + string(ds_list_find_value(songs,0)) + " " + string(ds_list_find_value(songs,1)) + " " + string(ds_list_find_value(songs,2)) + " " + string(ds_list_find_value(songs,3)));
sdb("playing song " + string(ds_list_find_value(songs,song_index)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sdb("***********************Destroying obj_music");
ds_list_destroy(songs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///play music
var song = ds_list_find_value(songs, song_index);
if(not global.mute)
{
    /*if(not audio_is_playing(song))
    {
        audio_play_sound(song, 100, true);
    }*/
    if(paused)
    {
        audio_resume_sound(song);
        paused = false;
        sdb("resuming song " + string(song));
    }
    else
    {
        if(not audio_is_playing(song))
        {
            ++song_index;
            if(song_index &gt; last_song_index)
            {
                song_index = 0;
                var last_played_song = ds_list_find_value(songs,3);
                ds_list_shuffle(songs);
                sdb("New song sequence: " + string(ds_list_find_value(songs,0)) + " " + string(ds_list_find_value(songs,1)) + " " + string(ds_list_find_value(songs,2)) + " " + string(ds_list_find_value(songs,3)));
                while(ds_list_find_value(songs,0) == last_played_song)
                {
                    ds_list_shuffle(songs);
                    sdb("Failed to generate good song sequence");
                    sdb("New song sequence: " + string(ds_list_find_value(songs,0)) + " " + string(ds_list_find_value(songs,1)) + " " + string(ds_list_find_value(songs,2)) + " " + string(ds_list_find_value(songs,3)));
                }
                sdb("Successfully generated song sequence.");
            }
            audio_play_sound(ds_list_find_value(songs, song_index),100,false);
            sdb("playing song " + string(song));
        }
    }
}
else
{

    if(audio_is_playing(song))
    {
        audio_pause_sound(song);
        paused = true;
        //sdb("Pausing song: " + string(song));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
