<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

opened = false;
first_opening = false;


global.save_slots_open = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle inventory

first_opening = false;

if(keyboard_check_pressed(vk_escape))
{
    opened = !opened;
    //Say this is the first time opening the escape menu
    if opened { 
        first_opening = true;
        
    }
    else
    {
        if(instance_exists(obj_inventory) &amp;&amp; not instance_exists(obj_recon_drone)
            &amp;&amp; not instance_exists(obj_att_drone)) {
            obj_inventory.disabled = false;
            obj_inventory.can_use_items = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save previous alpha

previous_alpha = draw_get_alpha();
previous_color = draw_get_colour();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu on escape press

if(opened)
{   
    if(instance_exists(obj_inventory)) {
        obj_inventory.disabled = true;
        obj_inventory.can_use_items = false;
    }
    
    opened = true;
    draw_set_alpha(0.75);
    draw_set_colour(c_black);
    v_x = view_xview[0];
    v_y = view_yview[0];
    v_width = view_wview[0];
    v_height = view_hview[0];
    draw_rectangle(v_x, v_y, v_x + v_width, v_y + v_height, false);
    
    /*//Remove old buttons
    if(instance_exists(obj_exit_btn)) {
        with(obj_exit_btn) {
            instance_destroy();
        }
    }
    if(instance_exists(obj_back_btn)) {
        with(obj_back_btn) {
            instance_destroy();
        }
    }*/
    
    if(first_opening) {    
        //Exit game button
        //exit_game_button = instance_create(v_x + v_width/2, v_y + 400, obj_exit_btn);
        exit_game_button = instance_create(v_x + v_width/2, v_y + 421, obj_exit_from_overlay);
        exit_game_button.text = "Exit Game";
        exit_game_button.depth = -100;
    
        //Return to main menu button
        //main_menu_button = instance_create(v_x + v_width/2, v_y + 300, obj_back_btn);
        main_menu_button = instance_create(v_x + v_width/2, v_y + 321, obj_main_menu_btn);
        main_menu_button.text = "Main Menu";
        main_menu_button.depth = -100;
        
        music_mute_button = instance_create(v_x + v_width/2, v_y + 221, obj_mute_button);
        music_mute_button.depth = -100;
        
        sfx_mute_button = instance_create(v_x + v_width/2, v_y + 121, obj_mute_sfx_button);
        sfx_mute_button.depth = -100;
        
        
        //Save game button
        /*save_game_button = instance_create(v_x + v_width/2, v_y + 121, obj_save_btn);
        save_game_button.text = "Save";
        save_game_button.depth = -100;*/
            
    }
    else {
        //Reposition exit game button
        exit_game_button.x = v_x + v_width/2;
        //exit_game_button.y = v_y + 400;
        exit_game_button.y = v_y + 421;
        
        //Reposition main menu button
        main_menu_button.x = v_x + v_width/2;
        //main_menu_button.y = v_y + 300;
        main_menu_button.y = v_y + 321;
        
        music_mute_button.x = v_x + v_width/2;
        music_mute_button.y = v_y + 221;
        
        sfx_mute_button.x = v_x + v_width/2;
        sfx_mute_button.y = v_y + 121;
        
        
        //save_game_button.x = v_x + v_width/2;
        //save_game_button.y = v_y + 121;
        
        if(global.save_slots_open == true &amp;&amp; instance_exists(obj_save_slot1))
        {
            save_game_slot1.x = v_x + v_width/2 - 300;
            save_game_slot1.y = v_y + 521;
            
            save_game_slot2.x = v_x + v_width/2;
            save_game_slot2.y = v_y + 521;
            
            save_game_slot3.x = v_x + v_width/2 + 300;
            save_game_slot3.y = v_y + 521;
        }
    }
}
else
{
    //Allow opening of inventory and items to be used again
    /*if(instance_exists(obj_inventory) &amp;&amp; not instance_exists(obj_recon_drone)
        &amp;&amp; not instance_exists(obj_att_drone)) {
        obj_inventory.disabled = false;
        obj_inventory.can_use_items = true;
    }*/
    
    //Remove old buttons
    if(instance_exists(obj_exit_from_overlay)) {
        with(obj_exit_from_overlay) {
            instance_destroy();
        }
    }
    if(instance_exists(obj_main_menu_btn)) {
        with(obj_main_menu_btn) {
            instance_destroy();
        }
    }
    if(instance_exists(obj_mute_button))
    {
        with(obj_mute_button)
        {
            instance_destroy();
        }
    }
    if(instance_exists(obj_mute_sfx_button))
    {
        with(obj_mute_sfx_button)
        {
            instance_destroy();
        }
    }
    /*if(instance_exists(obj_save_btn)){
        with(obj_save_btn){
            global.save_slots_open = false;
            instance_destroy();
        }
    }*/
    if(instance_exists(obj_save_slot1)){
        with(obj_save_slot1){
            instance_destroy();
        }
    }
    if(instance_exists(obj_save_slot2)){
        with(obj_save_slot2){
            instance_destroy();
        }
    }
    if(instance_exists(obj_save_slot3)){
        with(obj_save_slot3){
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restore alpha and color

draw_set_colour(previous_color);
draw_set_alpha(previous_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
