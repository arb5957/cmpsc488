<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
randomize();

instance_deactivate_all(true);
instance_activate_object(obj_escape_overlay);
instance_create(860,510,obj_giveup_btn);
difficulties[0] = "Easy";
difficulties[1] = "Medium";
difficulties[2] = "Hard";
difficulties[3] = "Ultra";
range_min[0] = 4;
range_max[0] = 5;
range_min[1] = 6;
range_max[1] = 12;
range_min[2] = 13;
range_max[2] = 20;
range_min[3] = 100;
range_max[3] = 120;

prizes[0] = ds_list_create();
prizes[1] = ds_list_create();
prizes[2] = ds_list_create();
prizes[3] = ds_list_create();

ds_list_add(prizes[0], obj_potion);
ds_list_add(prizes[0], obj_bow);
ds_list_add(prizes[0], obj_dagger);
ds_list_add(prizes[0], obj_potion_poison);
ds_list_add(prizes[0], obj_potion_speed);
ds_list_add(prizes[0], obj_sword);
ds_list_add(prizes[0], obj_blue_gun);

ds_list_add(prizes[1], obj_speed_boost);
ds_list_add(prizes[1], obj_recon_remote);
ds_list_add(prizes[1], obj_att_remote);
ds_list_add(prizes[1], obj_whip);
ds_list_add(prizes[1], obj_glove);
ds_list_add(prizes[1], obj_gun_2);
ds_list_add(prizes[1], obj_slower);
ds_list_add(prizes[1], obj_rain_maker);
ds_list_add(prizes[1], obj_snow_maker);
ds_list_add(prizes[1], obj_firework_maker);
ds_list_add(prizes[1], obj_cloud_maker);
ds_list_add(prizes[1], obj_quake_boots);
ds_list_add(prizes[1], obj_flame_gun);
ds_list_add(prizes[1], obj_pet);
ds_list_add(prizes[1], obj_map);

ds_list_add(prizes[2], obj_flying_stone);
ds_list_add(prizes[2], obj_shovel);
ds_list_add(prizes[2], obj_spin_blade);
ds_list_add(prizes[2], obj_shield);
ds_list_add(prizes[2], obj_teleport);
ds_list_add(prizes[2], obj_glove_bounce);
//ds_list_add(prizes[2], obj_gun_4);

ds_list_add(prizes[3], obj_turret_maker);
ds_list_add(prizes[3], obj_gun_3);
ds_list_add(prizes[3], obj_insta);
ds_list_add(prizes[3], obj_health_pack_dropper);
ds_list_add(prizes[3], obj_speed_zone);
ds_list_add(prizes[3], obj_gun_1);
ds_list_add(prizes[3], obj_gun_5);
ds_list_add(prizes[3], obj_gun_6);
ds_list_add(prizes[3], obj_gun_7);

for(var i = 0; i &lt; 4; i++)
{
    ds_list_shuffle(prizes[i]);
    descriptions[i] = ds_list_create();
    for(var j = 0; j &lt; 3; j++)
    {
        var prize = instance_create(0,0,ds_list_find_value(prizes[i], j));
        ds_list_add(descriptions[i], prize.name + "##" + prize.description);
        with(prize)
        {
            instance_destroy();
        }
        //sdb("Description: " + ds_list_find_value(descriptions[i], j));
    }
    
}


for(var i = 0; i &lt; 4; i++)
{
    selected_item[i] = -1;
}

difficulty_selected = -1;
cells = 4;
prize = obj_potion;

enable_click = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy prizes and descriptions lists
for(var i = 0; i &lt; 4; i++)
{
    ds_list_destroy(prizes[i]);
    ds_list_destroy(descriptions[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw difficulty select and get input
var save_alpha = draw_get_alpha();
var save_color = draw_get_color();
draw_set_alpha(1);
draw_set_color(c_black);
draw_set_font(font_inventory);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(0,0,"Play a game for a chance to win an item!##Choose Difficulty:");
draw_text(0,450, "Click to move pieces. Match all sides with the same color to win.");
var clicked = false;
if(not enable_click)
{
    if(mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right))
    {
        enable_click = true;
    }
}
if(enable_click and(mouse_check_button(mb_left) || mouse_check_button(mb_right)))
{
    clicked = true;
}
else if(mouse_check_button_released(mb_left) || mouse_check_button_released(mb_right))
{
    if(difficulty_selected &gt; -1)
    {
        sdb("Launching game at difficulty " + difficulties[difficulty_selected]);
        switch(difficulty_selected)
        {
            case 0:
                sdb("Selected Easy");
                break;
            case 1:
                sdb("Selected Medium");
                break;
            case 2:
                sdb("Selected Hard");
                break;
            case 3:
                sdb("Selected Ultra");
                break;
        }
        cells = irandom_range(range_min[difficulty_selected], range_max[difficulty_selected]);
        prize = ds_list_find_value(prizes[difficulty_selected], irandom(2));
        instance_create(0,0,obj_tetravex);
        exit;
    }
}
difficulty_selected = -1;
var w = 200;
var h = 300;
var x1 = 5;
var y1 = 110;
var x2 = x1+w;
var y2 = y1+h;
var s = w+50;

draw_set_halign(fa_center);
for(var i = 0; i &lt; 4; i++)
{
    var xx1 = x1+(s*i);
    var yy1 = y1;
    var xx2 = x2+(s*i);
    var yy2 = y2;
    
    if(clicked)
    {
        if(point_in_rectangle(mouse_x, mouse_y, xx1, yy1, xx2, yy2))
        {
            difficulty_selected = i;
        }
    }
    
    if(difficulty_selected == i)
    {
        draw_set_color(c_red);
        draw_rectangle(xx1,yy1,xx2,yy2,false);
        draw_set_color(c_black);
    }
    else
    {
        draw_rectangle(xx1,yy1,xx2,yy2,true);
        //draw_set_color(c_black);
    }
    
    draw_text(xx1+(w/2), yy1+10, "Click to Start.");
    draw_text(xx1+(w/2), yy1+50, difficulties[i] + "#" + string(range_min[i]) + " to " + string(range_max[i]) + " pieces");
    draw_text(xx1+(w/2), yy1+100, "What you can win: ");
    
    for(var j = 0; j &lt; 3; j++)
    {
        var object = ds_list_find_value(prizes[i],j);
        var sprite = object_get_sprite(object);
        if(sprite == -1) sprite = spr_nothing;
        var s_w = sprite_get_width(sprite);
        var s_h = sprite_get_height(sprite);
        var s_x1 = xx1+32+(j*64)-16;
        var s_y1 = yy1+150-16;
        var s_x2 = s_x1+32;
        var s_y2 = s_y1+32;
        draw_set_alpha(0.50);
        draw_set_color(c_black);
        draw_rectangle(s_x1, s_y1, s_x2, s_y2, false);
        //var s_x2 = s_x1+s_w;
        //var s_y2 = s_y1+s_h;
        draw_set_alpha(1);
        if(object == obj_whip)
        {
            draw_sprite(sprite,0,s_x1+26,s_y1+16);
        }
        else if(object == obj_sword)
        {
            draw_sprite_stretched(sprite,0,s_x1-5,s_y1,32,32);
        }
        else
        {
            draw_sprite_stretched(sprite,0,s_x1,s_y1,32,32);
        }
        if(point_in_rectangle(mouse_x, mouse_y, s_x1, s_y1, s_x2, s_y2))
        {
            draw_text_ext(xx1+(w/2), yy1+200, ds_list_find_value(descriptions[i], j),12,w);
        }
    }
    
    
}

switch(difficulty_selected)
{
    case -1:
        break;
    case 0:
        sdb("Selected Easy");
        break;
    case 1:
        sdb("Selected Medium");
        break;
    case 2:
        sdb("Selected Hard");
        break;
    case 3:
        sdb("Selected Ultra");
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
