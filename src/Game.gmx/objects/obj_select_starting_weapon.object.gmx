<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

selected_item_index = 0;
cell_size = 48;
clicked = false;
rows = 4;
cols = 4;
page_size = rows * cols;
page = 0;
page_item_index = 0; //This is the index of the first item on whatever page we are on.
length = array_length_1d(global.saved_items_array);
last_page = ceil(length / page_size) - 1;
sdb("length " + string(length) + " last_page " + string(last_page));

descriptions[length-1] = 0;
for(var i = 0; i &lt; length; i++)
{
    var item = instance_create(-32,-32, global.saved_items_array[i]);
    descriptions[i] = item.name + "##" + item.description;
    with(item)
    {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if clicked

if(mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right))
{
    clicked = true;
}
else
{
    clicked = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save previous alpha

previous_alpha = draw_get_alpha();
previous_color = draw_get_colour();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

var x1 = 320;
var y1 = 144;
var x2 = x1+176;
var y2 = y1+176;

draw_set_color(c_white);
draw_set_alpha(0.25);
draw_rectangle(x1,y1,x2,y2,false);
draw_set_alpha(1);

var xx1 = x1;
var yy1 = y1;
var s = 32;

for(var r = 0; r &lt; rows; r++)
{
    for(var c = 0; c &lt; cols; c++)
    {
        var index = page_item_index + (r*cols+c);
        if(index &gt;= length) break;
        
        var xx2 = xx1+32;
        var yy2 = yy1+32;
        
        if(point_in_rectangle(mouse_x, mouse_y, xx1, yy1, xx2, yy2) and clicked)
        {
            selected_item_index = index;
        } 
        
        if(index == selected_item_index)
        {
            draw_set_color(c_white);
            draw_set_alpha(0.1);
        }
        else
        {
            draw_set_color(c_white);
            draw_set_alpha(0.35);
        }
        draw_rectangle(xx1,yy1,xx2,yy2,false);
        draw_set_alpha(1);
        var object = global.saved_items_array[index];
        var sprite = object_get_sprite(object);
        if(sprite != -1)
        {
            if(object == obj_whip)
            {
                draw_sprite(sprite,0,xx1+26,yy1+16);
            }
            else if(object == obj_sword)
            {
                draw_sprite_stretched(sprite,0,xx1-5,yy1,s,s);
            }
            else
            {
                draw_sprite_stretched(sprite,0,xx1,yy1,s,s);
            }
            
        }
        xx1 += cell_size;
    }
    xx1 = x1;
    yy1 += cell_size;
}

xx1 = x1;
yy1 = y2 + 5;
xx2 = xx1 + 85;
yy2 = y2+32;

draw_set_font(font_inventory);
if(page &gt; 0)
{
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    draw_rectangle(xx1,yy1,xx2,yy2,false);
    if(point_in_rectangle(mouse_x, mouse_y, xx1, yy1, xx2, yy2) and clicked)
    {
        page_item_index -= page_size;
        --page;
    }
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    var width = xx2-xx1;
    var center_x = xx1 + width/2;
    draw_text_ext(center_x,yy1,"Previous Page", 12, width);
}

xx1 = xx2 + 6;
xx2 = xx1 + 85;
if(page &lt; last_page)
{
    draw_set_color(c_white);
    draw_set_alpha(0.5);
    draw_rectangle(xx1,yy1,xx2,yy2,false);
    if(point_in_rectangle(mouse_x, mouse_y, xx1, yy1, xx2, yy2) and clicked)
    {
        page_item_index += page_size;
        ++page;
    }
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    var width = xx2-xx1;
    var center_x = xx1 + width/2;
    draw_text_ext(center_x,yy1+5,"Next Page", 16, width);
}
xx1 = x1;
yy1 = yy2 + 5;
xx2 = xx1 + 176;
yy2 = yy1 + 32;
var width = xx2 - xx1;
var center_x = xx1 + width/2;
draw_set_color(c_white);
draw_set_alpha(0.5);
draw_rectangle(xx1,yy1,xx2,yy2,false);
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_ext(center_x,yy1,"Beat the game to unlock more items.",16,width);

//Draw Description
x1 = x2+5;
y1 = y1;
x2 = x1+112;
y2 = y2;
width = x2-x1;
center_x = x1 + width/2;

draw_set_color(c_white);
draw_set_alpha(0.50);
draw_rectangle(x1,y1,x2,y2,false);
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_ext(center_x,y1,descriptions[selected_item_index],16,width);
/*
for(var i = 0; i &lt; length; i++)
{
    var sprite = object_get_sprite(global.saved_items_array[i]);
    if(sprite != -1)
    {
        draw_sprite_stretched(sprite,0,xx1,yy1,s,s);
    }
    xx1 += 48;
    if(xx1+32 &gt; x2)
    {
        xx1 = x1;
        yy1 += 48;
    }
}
/*
var object = ds_list_find_value(prizes[i],j);
var sprite = object_get_sprite(object);
if(sprite == -1) sprite = spr_nothing;
var s_w = sprite_get_width(sprite);
var s_h = sprite_get_height(sprite);
var s_x1 = xx1+32+(j*64)-16;
var s_y1 = yy1+150-16;
var s_x2 = s_x1+32;
var s_y2 = s_y1+32;
draw_set_alpha(0.50);
draw_set_color(c_black);
draw_rectangle(s_x1, s_y1, s_x2, s_y2, false);
//var s_x2 = s_x1+s_w;
//var s_y2 = s_y1+s_h;
draw_set_alpha(1);
if(object == obj_whip)
{
    draw_sprite(sprite,0,s_x1+26,s_y1+16);
}
else if(object == obj_sword)
{
    draw_sprite_stretched(sprite,0,s_x1-5,s_y1,32,32);
}
else
{
    draw_sprite_stretched(sprite,0,s_x1,s_y1,32,32);
}
if(point_in_rectangle(mouse_x, mouse_y, s_x1, s_y1, s_x2, s_y2))
{
    draw_text_ext(xx1+(w/2), yy1+200, ds_list_find_value(descriptions[i], j),12,w);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restore alpha and color

draw_set_colour(previous_color);
draw_set_alpha(previous_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
