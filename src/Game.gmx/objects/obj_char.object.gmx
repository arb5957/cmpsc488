<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>obj_enemy_avoid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Player

//Create the inventory.
instance_create(x,y,obj_inventory);

//Temp Vars (Will delete)
can_shoot = true;

//Health and Invulnerability variables:
hp = 1000;
max_hp = 10000000;
invulnerable = false;
name="";
invulnerable_time = room_speed/2;
safe = true;

//Item pickup
queue = ds_queue_create();
flag = true; flag2 = true; flag3 = true;
curr_item  = ""; curr_item2 = ""; curr_item3 = "";
timer = 0;

//Player speed variables:
move_speed = 3;
original_move_speed = move_speed;

//Player movement variables:
going_up = false;
going_down = false;
going_left = false;
going_right = false;

exit_taken = 0;
first_spawn = true;
using_key = false;

//Keyboard mappings:

//Mappings for Movement:
move_up = ord('W');
move_down = ord('S');
move_left = ord('A');
move_right = ord('D');


//States the player can be in.
//Currently only affects movement.
//The default state is normal.
//The state slip restricts movement for a certain amount of time.
enum states
{
    NORMAL,
    SLIP,
    STOP
}

state = states.NORMAL;

//Script used to know what all items the player has equipped currently.
get_equipped_items = scr_char_get_equipped_items;

//For use with items that enable the player to fly.
flying = false;
//How many flying stones we have equipped. This is used if the player
//equips multiple flying stones equipped.
flying_stone_count = 0;

//All the alarms for obj_char are here. Only use one alarm for one thing.
//When you make a new alarm, change the name below to something descriptive,
//and only use that alarm for that purpose.
enum alarms
{
    ALARM0,
    ALARM1,
    ALARM2,
    ALARM3,
    ALARM4,
    ALARM5,
    ALARM6,
    ALARM7,
    ALARM8,
    ALARM9,
    RETURN_TO_NORMAL,
    INVULNERABILITY
}

char_position_x = -1;
char_position_y = -1;

//Flag used to indicate player is returning from a puzzle room.
left_puzzle_room = false;

//The coordinates to warp the player back to.
return_x = 0;
return_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the inventory
if(instance_exists(obj_inventory))
{
    with(obj_inventory)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invulnerability expiration alarm: Player is vulnerable again.

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the player's state back to normal.
sdb("Player state = NORMAL");
state = states.NORMAL;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flag = true and timer--;
flag3 = true;
timer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flag2 = true and timer--;
flag2 = true;
timer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flag = true and timer--;
flag = true;
timer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the player's state. Currently only moves player.

image_angle = point_direction(x, y, mouse_x, mouse_y);

switch(state)
{
    //Be sure to set the state back to normal when changing rooms.
    case states.NORMAL:
        script_execute(scr_char_move);
        break;
    case states.SLIP:
        script_execute(scr_char_slip);
        break;
    case states.STOP:
        //do nothing - character is stopped
        break;
}

//Checks for damage

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the character
if(not flying)
{
    if(place_meeting(x+hspeed, y, obj_terrain_wall)) // if moving horizontally collides with a wall
    {
        var solved = false;
        for(var i = 1; i&lt;7; i++)
        {
            if(not place_meeting(x+hspeed, y+i, obj_terrain_wall)) // if moving with a different y allows for moving around wall change to that y
            {
                y += i;
                solved = true;
                break;
            }
            else if(not place_meeting(x+hspeed, y-i, obj_terrain_wall))
            {
                y -= i;
                solved = true;
                break;
            }
        }
        if not solved // if still can't move around wall set hspeed to 0
        {
            hspeed = 0;
        }
    }
    if(place_meeting(x, y+vspeed, obj_terrain_wall)) // if moving vertically collides with wall
    {
        var solved = false;
        for(var i=1; i&lt;7; i++)
        {
            if(not place_meeting(x+i, y+vspeed, obj_terrain_wall)) // if moving with a different x allows for moving around wall change to that x
            {
                x += i;
                solved = true;
                break;
            }
            else if(not place_meeting(x-i, y+vspeed, obj_terrain_wall))
            {
                x -= i;
                solved = true;
                break;
            }
        }
        if not solved // if still can't move around wall change vspeed to 0
        {
            vspeed = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_point(room_width/2, room_height/2) &gt; 570)
{
    safe = false;
}
else 
{
    safe = true;
}
/*if(x &gt; room_width || x &lt; 0 || y &gt; room_height || y &lt; 0) {
    x = room_width/2;
    y = room_height/2;
    room_goto(rm_gamescreen2);
    show_debug_message("Going to 2");
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_item">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Try to add item to the Inventory.
//If the item the player collided with
//is on the ground,
if(other.on_ground)
{
    //Save its id otherwise we will lose it
    //in the following 'with' clause.
    var id_of_item = other.id;
    var char_id = id;
    
    //Call inventory.add(id).
    with(obj_inventory)
    {
        scr_inventory_add(id_of_item,char_id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_puzzle_room_entrance">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup and go to the puzzle room

//instance_deactivate_all(false);
return_x = x;
return_y = y;
left_puzzle_room = true;
with(other) instance_destroy();
scr_save_room();
room_goto(rm_puzzle_room);
instance_activate_object(obj_tetravex);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_next_room">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit_taken = other.dir;
vspeed = 0;
hspeed = 0;
room_goto(rm_gamescreen2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save room
if(room == rm_gamescreen2) {
    scr_save_room();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change room_x and room_y in universal controller

with(other) {
    if(dir == 0) { //taking east exit
        obj_universal_controller.room_x++;
    }
    else if(dir == 1) { //taking north exit
        obj_universal_controller.room_y--;
    }
    else if(dir == 2) { // taking west exit
        obj_universal_controller.room_x--;
    }
    else { // taking south exit
        obj_universal_controller.room_y++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(can_shoot == true)
{
    inst = instance_create(obj_held_item.x, obj_held_item.y, obj_bullet);
    with(inst)
    {
        speed = 5;
        direction = obj_held_item.image_angle;
        damage = 1;
        owner = 1;
    }
    can_shoot = false;
    alarm[0] = 20;
}
//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self.

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the item name when picked up. 
if(timer &gt; 0){
    //sdb(timer);
    if(flag &amp;&amp; !ds_queue_empty(queue)){
        flag = false;
        curr_item = ds_queue_dequeue(queue);
        alarm[1] = 45;
    }   
    if(flag2 &amp;&amp; !flag &amp;&amp; !ds_queue_empty(queue)){
        flag2 = false;
        curr_item2 = ds_queue_dequeue(queue);
        alarm[2] = 45;
    }
    if(flag3 &amp;&amp; !flag2 &amp;&amp; !flag &amp;&amp; !ds_queue_empty(queue)){
        flag3 = false;
        curr_item3 = ds_queue_dequeue(queue);
        alarm[3] = 45;
    }
    
    draw_set_font(font_inventory);    
    draw_set_color(c_red);
    draw_set_halign(fa_center);
    draw_text(x, y + 50, curr_item);
    
    if(!flag2){
        draw_text(x, y + 70, curr_item2);
    }
    if(!flag3){
        draw_text(x, y + 90, curr_item3);
    }
}  

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw circle around player when invulnerable.
if(invulnerable)
{
    draw_set_color(c_red);
    draw_circle(x,y,sprite_width*1.5,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_char_activate_items</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_test_save_new</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
