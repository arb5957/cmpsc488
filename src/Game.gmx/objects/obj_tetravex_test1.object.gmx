<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
randomize();

cells = 10;
number_side_colors = 4;
colors[0] = c_red;
colors[1] = c_blue;
colors[2] = c_green;
colors[3] = c_yellow;
polyomino = generate_small_polyomino(cells);

rows = ds_grid_height(polyomino);
cols = ds_grid_width(polyomino);

print_grid(polyomino);

block_grid = ds_grid_create(cols,rows);
ds_grid_clear(block_grid,0);
blocks[cells-1] = 0;
current_block = 0;

for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var block = instance_create(0,0,obj_tetravex_block);
            while(block.id == 0)
            {
                with(block){instance_destroy();}
                block = instance_create(0,0,obj_tetravex_block);
            }
            
            block.grid_column = c;
            block.grid_row = r;
            
            ds_grid_set(block_grid,c,r,block);
            blocks[current_block] = block;
            current_block++;
            
            var up_block = ds_grid_get(block_grid,c,r-1);
            var down_block = ds_grid_get(block_grid,c,r+1);
            var left_block = ds_grid_get(block_grid,c-1,r);
            var right_block = ds_grid_get(block_grid,c+1,r);
            
            if(up_block == 0)
            {
                block.up = irandom(number_side_colors-1);
            }
            else
            {
                block.up = up_block.down;
            }
            
            if(down_block == 0)
            {
                block.down = irandom(number_side_colors-1);
            }
            else
            {
                block.down = down_block.up;
            }
            
            if(left_block == 0)
            {
                block.left = irandom(number_side_colors-1);
            }
            else
            {
                block.left = left_block.right;
            }
            
            if(right_block == 0)
            {
                block.right = irandom(number_side_colors-1);
            }
            else
            {
                block.right = right_block.left;
            }
        }
    }
}

show_debug_message("block_grid: ");
print_grid(block_grid);

//ds_grid_destroy(block_grid);

for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var block_id = block.id;
    
    show_debug_message(string(block.id) + " up: " + string(block.up) + " down: " + string(block.down) + " left: " + string(block.left) + " right: " + string(block.right));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the grid holding our polyomino and blocks.
ds_grid_destroy(polyomino);

ds_grid_destroy(block_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate new board.
ds_grid_destroy(polyomino);

polyomino = generate_small_polyomino(cells);

rows = ds_grid_height(polyomino);
cols = ds_grid_width(polyomino);

print_grid(polyomino);

var count = 0;
for(var r = 0; r &lt; rows; r++)
{
    for(var c = 0; c &lt; cols; c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1) count++;
    }
}
show_debug_message("Found " + string(count) + " cells.");
if(count != cells)
{
    show_debug_message("obj_tetravex: Test failed.");
    game_end();
}
else
{
    show_debug_message("obj_tetravex: Test succeeded.");
}

ds_grid_destroy(block_grid);
block_grid = ds_grid_create(cols,rows);
ds_grid_clear(block_grid,0);
blocks[cells-1] = 0;
current_block = 0;

for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var block = instance_create(0,0,obj_tetravex_block);
            while(block.id == 0)
            {
                with(block){instance_destroy();}
                block = instance_create(0,0,obj_tetravex_block);
            }
            
            block.grid_column = c;
            block.grid_row = r;
            
            ds_grid_set(block_grid,c,r,block);
            blocks[current_block] = block;
            current_block++;
            
            var up_block = ds_grid_get(block_grid,c,r-1);
            var down_block = ds_grid_get(block_grid,c,r+1);
            var left_block = ds_grid_get(block_grid,c-1,r);
            var right_block = ds_grid_get(block_grid,c+1,r);
            
            if(up_block == 0)
            {
                block.up = irandom(number_side_colors-1);
            }
            else
            {
                block.up = up_block.down;
            }
            
            if(down_block == 0)
            {
                block.down = irandom(number_side_colors-1);
            }
            else
            {
                block.down = down_block.up;
            }
            
            if(left_block == 0)
            {
                block.left = irandom(number_side_colors-1);
            }
            else
            {
                block.left = left_block.right;
            }
            
            if(right_block == 0)
            {
                block.right = irandom(number_side_colors-1);
            }
            else
            {
                block.right = right_block.left;
            }
        }
    }
}

show_debug_message("block_grid: ");
print_grid(block_grid);

//ds_grid_destroy(block_grid);

for(var i = 0; i &lt; cells; i++)
{
    var block = blocks[i];
    var block_id = block.id;
    
    show_debug_message(string(block.id) + " up: " + string(block.up) + " down: " + string(block.down) + " left: " + string(block.left) + " right: " + string(block.right));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
var x1 = 64;
var y1 = 64;
//var x2 = (960-64)/2;
var y2 = 540-64;
var x2 = y2;
//var s = 32;
var h = y2-y1;
var w = x2-x1;
var maximum = max(rows,cols);
var s;
if(maximum == rows)
{
    var s = h/(rows-2);
}
else
{
    var s = w/(cols-2);
}
var quarter_s = s/4;
//draw_set_color(c_green);
//draw_rectangle(x1,y1,x2,y2,false);
for(var r = 1; r &lt; (rows-1); r++)
{
    for(var c = 1; c &lt; (cols-1); c++)
    {
        var value = ds_grid_get(polyomino,c,r);
        if(value == 1)
        {
            var xx1 = x1 + ((c-1)*s);
            var yy1 = y1 + ((r-1)*s);
            var xx2 = xx1 + s;
            var yy2 = yy1 + s;
            draw_set_color(c_black);
            draw_rectangle(xx1,yy1,xx2,yy2,true);
            
            var block = ds_grid_get(block_grid,c,r);
            if(block != 0)
            {
                draw_set_color(c_black);
                draw_rectangle(xx1,yy1,xx2,yy2,false);
                
                draw_set_color(colors[block.up]);
                draw_rectangle(xx1+quarter_s,yy1,xx2-quarter_s,yy1+quarter_s,false);
                
                draw_set_color(colors[block.right]);
                draw_rectangle(xx2-quarter_s,yy1+quarter_s,xx2,yy2-quarter_s,false);
                
                draw_set_color(colors[block.down]);
                draw_rectangle(xx1+quarter_s,yy2-quarter_s,xx2-quarter_s,yy2,false);
                
                draw_set_color(colors[block.left]);
                draw_rectangle(xx1,yy1+quarter_s,xx1+quarter_s,yy2-quarter_s,false);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
